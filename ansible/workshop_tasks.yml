- name: Get parksmap deployments
  k8s_info:
    kind: Deployment
    label_selectors:
      - component = parksmap
      - app = workshop
      - role = frontend
  register: parksmap_deployments

- name: Get participants who completed first container
  ansible.builtin.set_fact:
    completed_first_container: "{{ parksmap_deployments | json_query('resources[*].metadata.namespace') }}"

- name: Get participants who completed scaling
  ansible.builtin.set_fact:
    completed_scaling: "{{ parksmap_deployments | json_query('resources[?(metadata.generation>=`3`)].metadata.namespace') }}"

- name: Get parksmap routes
  k8s_info:
    kind: Route
    api_version: route.openshift.io/v1
    label_selectors:
      - component = parksmap
      - app = workshop
      - role = frontend
  register: parksmap_routes

- name: Get participants who have exposed their application to the outside world
  ansible.builtin.set_fact:
    completed_expose: "{{ parksmap_routes | json_query('resources[*].metadata.namespace') }}"

- name: Get RoleBindings
  k8s_info:
    kind: RoleBinding
    api_version: rbac.authorization.k8s.io/v1
  register: role_bindings

- name: Get participants who have granted view access to their default service account
  ansible.builtin.set_fact:
    completed_rbac: "{{ role_bindings | json_query(\"resources[?metadata.name=='view'].metadata.namespace\")}}"

- name: Get nationalparks Deployments
  k8s_info:
    kind: Deployment
    label_selectors:
      - component = nationalparks
      - app = workshop
      - role = backend
  register: nationalparks_deployments

- name: Get participants who completed deploy code
  ansible.builtin.set_fact:
    completed_deploy_code: "{{ nationalparks_deployments | json_query('resources[*].metadata.namespace') }}"

- name: Get MongoDB deployment configs
  k8s_info:
    kind: DeploymentConfig
    api_version: apps.openshift.io/v1
    label_selectors:
      - component = nationalparks
      - app = workshop
      - role = database
  register: mongodb_deployment_configs

- name: Get participants who have deployed their database
  ansible.builtin.set_fact:
    completed_database: "{{ mongodb_deployment_configs | json_query('resources[*].metadata.namespace') }}"

- name: Get participants who have added health checks to nationalparks
  ansible.builtin.set_fact:
    completed_health_checks: "{{ nationalparks_deployments | json_query('resources[?spec.template.spec.containers[0].readinessProbe].metadata.namespace') }}"

- name: Get pipeline runs
  k8s_info:
    kind: PipelineRun
    api_version: tekton.dev/v1beta1
    label_selectors:
      - tekton.dev/pipeline = nationalparks-pipeline
  register: pipeline_runs

- name: Get participants who have completed a pipeline run
  ansible.builtin.set_fact:
    completed_pipeline: "{{ pipeline_runs | json_query(\"resources[?status.conditions[0].reason=='Succeeded'].metadata.namespace\") | unique }}"

- name: Get participants who have setup their webhook properly
  ansible.builtin.set_fact:
    completed_webhook: "{{ pipeline_runs | json_query(query_string) | unique }}"
  vars:
      query_string: resources[?metadata.labels."triggers.tekton.dev/eventlistener"=='nationalparks'].metadata.namespace

- name: Get mlbparks deploymentconfigs
  k8s_info:
    kind: DeploymentConfig
    api_version: apps.openshift.io/v1
    label_selectors:
      - component = mlbparks
      - app = workshop
      - role = backend
  register: mlbparks_deployment_configs

- name: Get participants who completed their mlbparks deployments
  ansible.builtin.set_fact:
    completed_template: "{{ mlbparks_deployment_configs | json_query('resources[*].metadata.namespace') }}"

- name: Get mlbparks builds
  k8s_info:
    kind: Build
    api_version: build.openshift.io/v1
    label_selectors:
      - buildconfig = mlbparks
  register: mlbparks_builds

- name: Get participants who completed a binary build
  ansible.builtin.set_fact:
    completed_binary: "{{ mlbparks_builds | json_query(\"resources[?spec.source.type=='Binary' && status.phase=='Complete'].metadata.namespace\") }}" 

- name: Get username configmaps
  k8s_info:
    kind: ConfigMap
    label_selectors:
      - ocp4 = getting-started
  register: username_configmaps

- name: Set username overrides
  ansible.builtin.set_fact:
    username_overrides: |
      {
        {%- for configmap in username_configmaps.resources %}
          {{ configmap.metadata.namespace }}: {{ configmap.data.name | default(omit) }}
        {% endfor -%}
      }

- name: Store workshop task results
  ansible.builtin.set_fact:
    user_completion_data: |
      {%- for username in lookup("sequence", "1-" + number_of_users + ":user%i", wantlist=True) %}
        - attendeeName: {{ username }}
          displayName: {{ (username_overrides | from_yaml)[username] | default(omit) }}
          workshopTasks:
            - module: "0"
              status: {{ (username in completed_first_container) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_scaling) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_expose) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_rbac) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_deploy_code) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_database) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_health_checks) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_pipeline) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_webhook) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_template) | ternary('success', 'pending') }}
            - module: "0"
              status: {{ (username in completed_binary) | ternary('success', 'pending') }}
      {% endfor -%}
